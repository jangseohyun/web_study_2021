■■■ Spring Framework 이해하기 ■■■ 

○ 개요

   1. Framework
      어플리케이션을 구현하고 관리하는 환경(약속, 틀)

      ▣ 프레임워크- 하면 레고를 떠올리자.
         끼우고 끼움 당하는 블럭이 각각 있어야 조립이 가능하다. (부품들의 호환성)
         스프링 프레임워크란, 어플리케이션을 구현하고 관리하는 환경의 주체가 스프링이라는 것.
	 이제는 객체 만들고 읽고 유지 관리하는 걸 다 스프링(스프링 컨테이너)이 할 것.

	class 클래스A
	{
 		메소드()
		{ 
			클래스B ob = new 클래스B();
		}
	}

	우리는 이걸 A에 얹혀사는 B 느낌으로 봤음.
    	그런데 스프링 프레임워크 관점에서는.. 
	사실은 반대더라..!
	A의 목숨줄을 B가 쥐고 있던 것..!

        class 외부 어디선가..
	{ 
		메소드()
		{
			클래스A ob = new 클래스A();
		}
	}
	A가 제대로 돌아가지 않으면 class 외부~는 제대로 돌아갈 수 없다. 
	
	① A 가 선풍기고 B 가 모터라고 생각해보자.
        모터가 선풍기에 기생하고 있다는게 원래 우리 관점.
        하지만 다시보자면, 모터가 고장났다면 선풍기는 선풍기의 역할을 수행할 수 없음.


        ② 지금까지는 A 안에서 B가 생성되도록 만듦(정적으로). 그런데 스프링에서는
        어디선가 B가 만들어지고, 그것을 A에 주입(끼워넣는)하는 구조가 될 것. → "제어가 역전됐다"
        class 클래스A
        {
		메소드()
		{
			[		] ← 이렇게 뚫어놓고  / 클래스B ob = new 클래스B();
		}					      / 클래스C ob = new 클래스C(); 를 끼워넣을 것..
	}
	이것을 하는 주체가 스프링. 
	
	B와 C는 의존객체. 얘를 주입하기 때문에 의존성 주입-.

	
	이것이 어떻게 가능할까? 열쇠는 인터페이스에 있다.
        
         class 유림
	{ 
		메소드()
		{
			혜림 ob = new 혜림();
		}
	}      
	
	혜림이가 잘못되면 유림이도 잘못됨.
        그래서 혜림이가 아니라..

         class 유림
	{ 
		메소드()
		{
			F강의장식구 ob = new F강의장식구();
		}
	}   
	이렇게 만듦..
	즉 혜림은...

        혜림 implements F강의장식구
        {
	}
        해야 함..

         class 유림
	{ 
		메소드()
		{
			F강의장식구 ob = new 혜림(); (업캐스팅)
		}
	}  

	이게 가능한... 혜림 자리엔 하림, 나현 등등 다 가능한..
        ★ 스프링의 핵심 가치는 유연성


   2. Spring Framework
      설정 정보(XML)에 의해 어플리케이션을 구성하고,
      객체를 생성, 관리하는 주체.


○ 스프링 프레임워크(Spring Framework)의 개념
   
   스프링은 자바 엔터프라이즈 어플리케이션 개발에 사용되는
   어플리케이션 프레임워크.

   어플리케이션 프레임워크는 어플리케이션 개발을 빠르고
   효율적으로 할 수 있도록 어플리케이션 바탕이 되는 틀과
   공통 프로그래밍 모델, 그리고 API 등을 제공해 준다.
 
   - 어플리케이션의 기본 틀 → 스프링 컨테이너

     스프링은 스프링 컨테이너 또는 어플리케이션 컨텍스트라고 불리는
     스프링 런타임 엔진을 제공한다.
     스프링 컨테이너는 설정 정보(XML:배치 기술서)를 참고해서
     어플리케이션을 구성하는 오브젝트(객체)를 생성하고 관리한다.
     스프링 컨테이너는 독립적으로 동작할 수도 있지만 
     보통... 웹 모듈에서 동작하는 서비스나 서블릿으로 등록해서 사용한다.
     

     스프링을 사용하려면 먼저 스프링 컨테이너를 다루는 방법과
     스프링 컨테이너가 어플리케이션 오브젝트를 이용할 수 있도록
     설정 정보를 작성하는 방법을 알아야 한다.
    
     ==> 설정 정보(XML)에 의해 어플리케이션을 구성하고
         객체를 생성, 관리하는 주체


  
   - 공통 프로그래밍 모델 → IoC/DI, 서비스 추상화, AOP

     프레임워크라는 어플리케이션을 구성하는 오브젝트(객체)가
     생성되고 동작하는 방식에 대한 틀을 제공해줄 뿐 아니라
     어플리케이션 코드가 어떻게 작성되어야 하는지에 대한 기준도 제시한다.
     이런 틀을 보통 프로그래밍 모델이라고 한다.
     스프링은 세 가지 핵심 프로그래밍 모델을 제공한다.

     ① IoC/DI(가장 중요, 스프링의 90%) 
	오브젝트 생명 주기와 의존 관계에 대한 프로그래밍 모델이다.
        스프링은 유연하고 확장성이 뛰어난 코드를 만들 수 있게 도와주는
        객체 지향 설계 원칙과 디자인 패턴의 핵심 원리를 담고 있는
        IoC/DI 를 프레임워크의 핵심 근간으로 삼고 있다.
        스프링 프레임워크에서 동작하는 코드는
        IoC/DI 방식을 따라 작성되어야 스프링이 제공하는 가치를 제대로 누릴 수 있다.
        스프링이 직접 제공하는 모든 기술과 API, 심지어 컨테이너 까지도
        IoC/DI 방식으로 작성되어(만들어져)있다.
        스프링을 바르게 이해하고 효율적으로 사용하는 데
        기본이 되며 가장 중요한 기술이다.
		
	· IoC	      → - 객체 관리의 주체.
			 - Inversion of Control. 제어의 역전(역제어)
			 - 객체 생성과 관리를 직접 하는 것이 아니라
			   외부(컨테이너)에서 만들어진 오브젝트(객체)를
			   제공받는 입장이 되는 것.
			 - Bean : 스프링이 관리하는 대상.
			 - Bean Factory : 객체를 관리하는 주체.
		   	   일반적으로 이 기능을 확장한 Application Context 를 사용하게 된다.
			 - Application Context : Bean Factory 의 확장 버전.
			 - 설정 정보 : 어떤 객체들이 관리 대상인지 설정한 정보.
                           XML, Annotation 등을 이용한다. (XML이 스프링 철학에 가까움)
			   객체 의존 관계도 표현되어 있다.
			 - IoC 컨테이너 : 객체를 등록하고 관리하는 공간. (스프링 컨테이너 안에 포함됨)

	· DI	     →  - 객체를 관리하는 방법... IoC 컨테이너가 DI 하는 것...
			 - 자바에서 객체를 생성하고 관리하는 방법은
			   모두 has-a 관계를 통해 처리해 왔기 때문에
			   이들은 모두 의존 관계가 치밀하고 밀접한 상황일 수 밖에 없다.
			   때문에... 이러한 강한 결합 상태는
			   유연성을 떨어뜨리는 결과를 초래하게 된다.
 			   이러한 결합 상태를 풀어주는 과정(방법)이 바로 DI 이다.
			 - Dependency Injection : 의존성 주입(의존관꼐 주입)
			 - 의존관계 주입 : 의존 객체를... 이 객체를 사용하는 객체에...
			   외부에서 주입하는 액션(상태)
			 - 의존 관계 : A 가 실행되기 위해서 B 를 필요로 하는 상태
			 - 의존 객체 : A 입장에서의 의존 객체는 B (즉, 주입되는 객체)

			 ※ 우선... A 객체에 B 객체의 주소를 넘겨줌으로써
			    B 객체를 사용하게 된다면...
			    A 객체는 여전히 B 객체를 사용하는 데는 문제가 없고,
			    B 객체는 A 객체와의 결합 상태가 느슨해진다고 할 수 있다.

			    이 때 넘겨주는 방법은 생성자 또는 setter() 메소드를
			    이용하는 방법이 있다.

			    DI 를 위해 객체는 작은 객체부터 생성해서
			    큰 객체로 DI 하게 된다.
			    
			    이 때, 완성된 오브젝트(객체)가 만들어질 떄까지
			    객체를 관리할 주체가 필요하게 되는데
			    그 역할을 하는 것이 바로 컨테이너인 것이다.


			    
     ② 서비스 추상화
	스프링을 사용하면 환경이나 서버, 특정 기술에
	종속되지 않고 이식성이 뛰어나며 유연한 어플리케이션을
	만들 수 있게 되는데, 이를 가능하게 해 주는 것이 바로 서비스 추상화이다.
	구체적인 기술과 환경에 종속되지 않도록
	유연한 추상 계층을 두는 방법이다.

     ③ AOP(Aspect Oriented Programming)
	이 AOP는 어플리케이션 코드에 산재해서 나타나는 부가적인 기능을
	독립적인 상태로 모듈화하는 프로그래밍 모델이다.
	스프링은 AOP 를 이용해서 다양한 엔터프라이즈 서비스를
	적용하고도 깔끔한 코드를 유지할 수 있게 해준다.

        // 자바는 OOP였지..?ㅎㅎ Object Oriented Programming
  	   둘이 아주 다른 것이 아님..
	// AOP는 관점 지향 프로그래밍 → 업무를 처리하는 관점 지향 프로그래밍

   - 기술 API
    
     스프링은 엔터프라이즈 어플리케이션 개발의 다양한 영역에
     바로 활용될 수 있는 방대한 양의 기술 API 를 제공한다.
     UI 작성은 물론이고, 웹 프리젠테이션 계층, 비즈니스 서비스 계층
     , 기반 서비스 계층, 도메인 계층, 데이터 엑세스 계층 등에서
     필요한 주요 기술을 스프링에서 일관된 방식으로 사용할 수 있도록
     지원해주는 전략 클래스를 제공한다.
     스프링이 제공하는 API 와 지원 기술은
     모두 스프링 프로그래밍 모델에 따라 작성되었기 때문에
     이걸 가져다 쓰는 것만으로도
     스프링 프로그래밍 모델을 코드에 자연스럽게 적용할 수 있다.
     스프링의 모든 기술은 표준 자바 엔터프라이즈 플랫폼(JavaEE)
     에 기술을 두고 있다.
     표준 기술과 더불어 유명 오픈 소스 기술과 주요 상용 기술에 대한
     지원 기능도 다양하게 제공된다. 



     선풍기 > 모터 > 코일뭉치 > 나사
     선풍기 조립될동안 코일뭉치 살려둬야..


     문 > 손잡이 > 잠금뭉치 > 나사  > 틀
     문을 만들때까지.. 손잡이는 살아있어야.. 손잡이를 만들 때 까지 잠금뭉치가 살아있어야.. 
     그런데 잠금뭉치 만들 때 틀이 필요하지는 않음. 이렇게 언제까지 살려둬야 하는 지가 생명주기


     자동차 엔진 만드는데 2만 4천 개의 부품 필요하다면.. 원래 부품을 다 따로따로 관리해야함.
     그런데 그러면 너무 번잡스러움..
     공구판을 예로 들면.. 공구판에 아무것도 안꽂아놓은게 xml.. 꽂아놓고 어느정도 조립된게 Annotation

     맨인블랙 케비넷에 하나의 세계가 있는데.. 그 캐비넷이 스프링 컨테이너..
     그 안에서 돌아가는 공장이 빈 팩토리고..공단이 어플리케이선 컨텍스트..
     

     사람이라는 객체 안에.. 심장 객체.. 위 객체.. 뇌 객체... 포함...
     그런데 이제는... 사람 안에.. 뇌, 심장, 위 등등이 없고 빈 구멍만 있음...


     AOP..
     문서의 기초 양식(서명, 날짜, 싸인 등)만 만들어 놓고 
     가운데 본문에(휴가 계획서, 결산보고서, 사업기획서)만 --- 보조 업무가 공통적으로 들어가니까 가만히 있고
     바꿔서 쓰자는 것.. 그렇게 관점이 바뀐다고..!	      주업무만 바꿔서 쓰자는 것.. 
     손으로 눈을 비비는게 아니라 눈으로 손을 비비는 것..(손은 가만있고)
     OOP였다면 문서가 다 따로 있어야겠지만 AOP는 하나의 틀에 삽입하면 됨


